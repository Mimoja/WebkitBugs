------------------------------------------------------------------------
r149836 | oliver@apple.com | 2013-05-09 22:03:23 +0200 (Do, 09. Mai 2013) | 74 Zeilen
Ge√§nderte Pfade:
   M /trunk/LayoutTests/ChangeLog
   A /trunk/LayoutTests/fast/js/eval-cache-scoped-lookup-expected.txt
   A /trunk/LayoutTests/fast/js/eval-cache-scoped-lookup.html
   A /trunk/LayoutTests/fast/js/script-tests/eval-cache-scoped-lookup.js
   M /trunk/Source/JavaScriptCore/ChangeLog
   M /trunk/Source/JavaScriptCore/JavaScriptCore.xcodeproj/project.pbxproj
   M /trunk/Source/JavaScriptCore/bytecode/EvalCodeCache.h
   M /trunk/Source/JavaScriptCore/bytecode/UnlinkedCodeBlock.h
   M /trunk/Source/JavaScriptCore/debugger/Debugger.cpp
   M /trunk/Source/JavaScriptCore/debugger/DebuggerCallFrame.cpp
   M /trunk/Source/JavaScriptCore/interpreter/Interpreter.cpp
   M /trunk/Source/JavaScriptCore/runtime/CodeCache.cpp
   M /trunk/Source/JavaScriptCore/runtime/CodeCache.h
   M /trunk/Source/JavaScriptCore/runtime/Executable.cpp
   M /trunk/Source/JavaScriptCore/runtime/Executable.h
   M /trunk/Source/JavaScriptCore/runtime/JSGlobalObject.cpp
   M /trunk/Source/JavaScriptCore/runtime/JSGlobalObject.h
   M /trunk/Source/JavaScriptCore/runtime/JSGlobalObjectFunctions.cpp
   M /trunk/Source/JavaScriptCore/runtime/VM.cpp
   M /trunk/Source/JavaScriptCore/runtime/VM.h

Code cache stores bogus var references for functions in eval code
https://bugs.webkit.org/show_bug.cgi?id=115747

Reviewed by Mark Hahnenberg.

Source/JavaScriptCore:

Non-global eval now uses a per-CodeBlock cache, and only use it
when we're at the top of a function's scope.  This means that we
will no longer cache the parsing of a single string across
multiple functions, and we won't cache when we're nested inside
constructs like |with| and |catch| where previously we would, which
is good because caching in those cases is unsound.

* bytecode/EvalCodeCache.h:
(JSC):
(JSC::EvalCodeCache::getSlow):
(JSC::EvalCodeCache::get):
* bytecode/UnlinkedCodeBlock.h:
(JSC::UnlinkedCodeBlock::codeCacheForEval):
(UnlinkedCodeBlock):
(RareData):
* debugger/Debugger.cpp:
(JSC::evaluateInGlobalCallFrame):
* debugger/DebuggerCallFrame.cpp:
(JSC::DebuggerCallFrame::evaluate):
* interpreter/Interpreter.cpp:
(JSC::eval):
* runtime/CodeCache.cpp:
(JSC::CodeCache::CodeCache):
(JSC::CodeCache::generateBytecode):
(JSC):
(JSC::CodeCache::getCodeBlock):
* runtime/CodeCache.h:
(JSC::CodeCacheMap::CodeCacheMap):
(CodeCacheMap):
(JSC::CodeCacheMap::canPruneQuickly):
(JSC::CodeCacheMap::prune):
(JSC::CodeCache::create):
(CodeCache):
* runtime/Executable.cpp:
(JSC::EvalExecutable::EvalExecutable):
(JSC::EvalExecutable::compileInternal):
* runtime/Executable.h:
(JSC::EvalExecutable::create):
(EvalExecutable):
* runtime/JSGlobalObject.cpp:
(JSC::JSGlobalObject::createEvalCodeBlock):
* runtime/JSGlobalObject.h:
(JSGlobalObject):
* runtime/JSGlobalObjectFunctions.cpp:
(JSC::globalFuncEval):
* runtime/VM.cpp:
(JSC::VM::VM):
* runtime/VM.h:
(VM):

LayoutTests:

Many tests

* fast/js/eval-cache-scoped-lookup-expected.txt: Added.
* fast/js/eval-cache-scoped-lookup.html: Added.
* fast/js/script-tests/eval-cache-scoped-lookup.js: Added.
(first):
(a.string_appeared_here.second):
(third):
(fifth):
(sixth):
(seventh):
(eighth):
(nineth):
(tenth):
(eleventh):

